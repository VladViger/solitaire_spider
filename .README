// число, площадь перекрытия при которой одна карта считается над другой.
// берем приблизительно 1/6 от общей площади карты.
CARD_SQUARE;

// DOM-элемент, контейнер для начальной колоды карт.
cardDeckEl;

// DOM-элемент, содержит выбывшие (сложенные) из пасьянса карты.
dropout;

// функция-конструктор, создает новый объект - колоду карт.
CardDeck(diff);

    // число, уровень сложности (1, 2 или 4 масти в колоде).
    diff;

    // массив, набор строк обозначающих определенную карту (104 индекса).
    .cards;

    // массив, набор строк css-селекторов, соответствующих
    // последней карте в сложенной цепочке.
    .SELECTORS

// функция, возвращает число - площадь (px*px) пересечения элементов el1 и el2 в окне.
crossingArea(el1, el2);

// функция, возвращает value выбранного radio, нужна для совместимости с IE.
getValueFromRadioButton(buttons);

// показывает всплывающее сообщение с текстом text и координатами left, top.
showMessage(text, left, top);

// возвращает max Y координату при которой элементы '.column' и '.ofside' не будут пересекаться.
// limitHeight - содержит результат функции.
getLimitHeight();

// регулирует для el высоту с помощью атрибута data-height.
setSuitedHeight(el, maxHeight);

// объект, содержит методы для управления элементами колоды.
dealer;
    
    // перемешать массив arr (перетасовать колоду).
    .shuffle(arr);

    // создает на основе массива cardsArr DOM-элементы li с css классом и 
    // атрибутом data-card. Добавляет в элемент cardDeckEl.
    .reupload(cardsArr);

    // раздать из колоды n карт, если opened = true - открытыми.
    // берет элементы из cardDeckEl и добавляет в '.column'.
    // animation - включает анимацию при раздаче (true/false).
    .delivery(n, opened, animation);

    // возвращает true/false.
    // проверяет доступна ли карта target для перемещения.
    // selectors - css-селекторы для проверки.
    .checkStartDrag(target, selectors);

    // возвращает DOM-элемент, над которым "бросили" карту, если ее туда можно положить.
    // target - карта, source - откуда взяли карту.
    .getDroppable(target, source);

    // поиск сложенных цепочек по selectors и перемещение их в dropoutEl.
    // animation == true -> c анимацией;
    .takeAway(selectors, dropoutEl, animation);

    // проверка, есть ли элементы без потомков, если есть возвращает true.
    .checkEmpty(elems);

    // поиск карты из allCards которую можно положить на карту из allPlaces и их подсветка.
    // selectors - css-селекторы для проверки.
    .hint(allCards, allPlaces);

    // выводит сообщение о победе.
    .showCongratulation();

    // убирает сообщение о победе.
    .hideCongratulation();

// объект, содержит данные об элементе, который перетаскивают.
dragObj;

    // DOM-элемент, контейнер-транспортер для drag-элементов.
    .el;

    // число, сдвиг курсора относительно левой верхней точки drag-элемента.
    .shiftX;
    .shiftY;

    // DOM-элемент, содержит родителя из которого взяли drag-элемент.
    .parentOld;

    // DOM-элемент, содержит родителя в который положили drag-элемент.
    .parentNew;

// метод на основе встроенного appendChild, но с анимацией.
Node.animationAppendChild(child);